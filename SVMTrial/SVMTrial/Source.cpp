#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/ml/ml.hpp>

using namespace cv;

int main()
{
	// Data for visual representation
	Mat image;

/*	// Set up training data
	float labels[8] = { 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0 };
	Mat labelsMat(8, 1, CV_32FC1, labels);

	float trainingData[8][3] = { { 501, 100, 50 }, { 25, 50, 69 }, { 50, 25, 28 }, { 10, 50, 39 }, {221, 21, 100}, {21, 356, 256}, {511, 12, 155}, {98, 52, 430} };
	Mat trainingDataMat(8, 3, CV_32FC1, trainingData);     */


	float labels[23] = { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0 };
	Mat labelsMat(23, 1, CV_32FC1, labels);

	float trainingData[23][6] = { { 222.358, 19.7769, -0.0469194, 2.22559, 203.769, 17.6278 }, { 223.993, 23.9725, - 0.904108, 4.30589, 199.411, 25.7494 }, { 229.063, 23.9373, - 1.35469, 5.79586, 204.043, 25.1457 }, { 231.79, 20.6261, - 1.49043, 7.95464, 209.674, 18.8689 }, { 220.938, 23.031, - 1.25692, 6.00979, 200.416, 23.7021 }, { 222.97, 21.6903, - 0.91096, 4.86197, 201.96, 22.2137 }, { 225.517, 20.7964, - 0.561113, 3.50706, 204.5, 20.0629 }, { 221.887, 16.9375, - 0.387607, 2.93282, 203.793, 15.3526 }, { 209.736, 19.611, 0.772813, 2.93919, 197.329, 16.5643 }, { 219.085, 17.2931, 0.169957, 2.17946, 201.482, 13.5686 }, { 214.399, 18.2833, 0.161675, 2.5673, 197.375, 14.5311 }, { 233.306, 17.5499, - 0.607392, 3.10148, 217.2, 20.0381 }, { 207.494, 21.0499, 0.585211, 3.10089, 189.689, 20.0842 }, { 203.207, 20.0072, 0.17998, 2.59955, 151.768, 19.6985 }, { 219.223, 21.3647, - 0.0296671, 2.56404, 163.504, 20.5748 }, { 221.071, 25.9566, - 0.4048, 2.70111, 164.387, 25.2943 }, { 201.079, 23.4503, 0.71533, 3.18292, 148, 24.443 }, { 212.876, 25.6486, 0.627304, 3.64677, 154.678, 25.9113 }, { 211.931, 17.823, 0.108727, 3.03128, 158.364, 17.3672 }, { 222.519, 25.9748, - 0.2911, 2.30124, 168.371, 27.3446 }, { 217.89, 29.8785, - 0.171577, 2.37494, 164.622, 31.7869 }, { 188, 11.0136, - 0.106358, 1.34697, 125.65, 12.551 }, { 208.62, 29.7964, 0.122054, 2.36201, 154.663, 30.2741 } };
	Mat trainingDataMat(23, 6, CV_32FC1, trainingData);

	float testing_vector[6] = { 203.207, 20.0072, 0.17998, 2.59955, 151.768, 19.6985 };
	// Set up SVM's parameters
	CvSVMParams params;
	params.svm_type = CvSVM::C_SVC;
	params.kernel_type = CvSVM::LINEAR;
//	params.term_crit = cvTermCriteria(CV_TERMCRIT_ITER, 100, 1e-6);

	Mat sample(1, 6, CV_32FC1, testing_vector);// testing_vector is 1D vector
	// Train the SVM
	CvSVM SVM;
	SVM.train(trainingDataMat, labelsMat, Mat(), Mat(), params);

		float response = SVM.predict({sample});

		if (response == 1)
		{
			image = imread("hand.jpg", -1);
			imshow("POSITIVE", image);
		}
		else if (response == -1)
		{
			image = imread("hand.jpg", -1);
			imshow("NEGATIVE", image);
		}


	waitKey(0);

}